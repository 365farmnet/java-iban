{"name":"Java-IBAN","tagline":"A small Java library for dealing with International Bank Account Numbers (IBANs).","body":"The `IBAN` class is intended for use in your domain types. `IBAN` objects enforce that their value is the correct length\r\nfor its country code and that it passes checksum validation. The `Modulo97` class exposes the checksum validation code\r\nfor other purposes, such as live input validation.\r\n\r\n### Install\r\n\r\nGrab a package from Github or get it from Maven Central:\r\n\r\n#### Maven\r\n\r\n```xml\r\n    <dependency>\r\n        <groupId>nl.garvelink.oss</groupId>\r\n        <artifactId>iban</artifactId>\r\n        <version>1.0.0</version>\r\n    </dependency>\r\n```\r\n\r\n#### Gradle\r\n\r\n```javascript\r\n    dependencies {\r\n        compile 'nl.garvelink.oss:iban:1.0.0'\r\n    }\r\n```\r\n\r\n### Use\r\n\r\nObtain an `IBAN` instance using one of the static factory methods: `valueOf( )` and `parse( )`. Methods throw\r\n`java.lang.IllegalArgumentException` on invalid input.\r\n\r\n```java\r\n    // Obtain an instance of IBAN.\r\n    IBAN iban = IBAN.valueOf( \"NL91ABNA0417164300\" );\r\n\r\n    // toString() emits standard formatting, toPlainString() is compact.\r\n    String s = iban.toString(); // \"NL91 ABNA 0417 1643 00\"\r\n    String p = iban.toPlainString(); // \"NL91ABNA0417164300\"\r\n\r\n    // Input may be formatted.\r\n    iban = IBAN.valueOf( \"BE68 5390 0754 7034\" );\r\n\r\n    // The valueOf() method returns null if its argument is null.\r\n    iban.valueOf( null ); // null\r\n\r\n    // The parse() method throws an exception if its argument is null.\r\n    iban.parse( null ); // IllegalArgumentException\r\n\r\n    // IBAN does not implement Comparable<T>, but a simple Comparator is provided.\r\n    List<IBAN> ibans = getListOfIBANs();\r\n    Collections.sort( ibans, IBAN.LEXICAL_ORDER );\r\n\r\n    // The equals() and hashCode() methods are implemented.\r\n    Map<IBAN, String> ibansAsKeys = Maps.newHashMap();\r\n    ibansAsKeys.put( iban, \"this is fine\" );\r\n\r\n    // You can use the Modulo97 class directly to compute or verify the check digits on an input.\r\n    String candidate = \"GB29 NWBK 6016 1331 9268 19\";\r\n    boolean valid = Modulo97.verifyCheckDigits( candidate ); // true\r\n\r\n    // Modulo97 API methods take CharSequence, not just String.\r\n    StringBuilder builder = new StringBuilder( \"LU000019400644750000\" );\r\n    int checkDigits = Modulo97.calculateCheckDigits( builder ); // 28\r\n\r\n    // Get the expected IBAN length for a country code:\r\n    int length = IBAN.getLengthForCountryCode( \"DK\" );\r\n```\r\n\r\n### Notes\r\n\r\n* The length of an IBAN is checked against the required length for its country code. Other country-specific\r\n  validation (e.g. national check digits) is absent.\r\n* The `IBAN` class does not implement `Serializable`, because the string representation is a superior serialized form.\r\n\r\n### References\r\n\r\n * http://en.wikipedia.org/wiki/IBAN\r\n * http://www.ecbs.org/iban.htm\r\n\r\n### Copyright and License\r\n\r\nCopyright 2013 Barend Garvelink\r\n\r\n```none\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}