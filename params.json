{"name":"Java-IBAN","tagline":"A small Java library for dealing with International Bank Account Numbers (IBANs).","body":"A small Java library for dealing with International Bank Account Numbers (IBANs).\r\n\r\nThe `IBAN` class is intended for use in your domain types. `IBAN` objects enforce that their value is the correct length\r\nfor its country code and that it passes checksum validation. The `Modulo97` class exposes the checksum validation code\r\nfor other purposes, such as live input validation.\r\n\r\nThe library is compatible for use in Android apps.\r\n\r\n### Install\r\n\r\nGrab a package [from Github][download] or get it from Maven Central:\r\n\r\n#### Maven\r\n\r\n```xml\r\n    <dependency>\r\n        <groupId>nl.garvelink.oss</groupId>\r\n        <artifactId>iban</artifactId>\r\n        <version>1.3.0</version>\r\n    </dependency>\r\n```\r\n\r\n#### Gradle\r\n\r\n```javascript\r\n    dependencies {\r\n        compile 'nl.garvelink.oss:iban:1.3.0'\r\n    }\r\n```\r\n\r\n[download]: https://github.com/barend/java-iban/releases\r\n\r\n### Use\r\n\r\nObtain an `IBAN` instance using one of the static factory methods: `valueOf( )` and `parse( )`. Methods throw\r\n`java.lang.IllegalArgumentException` on invalid input.\r\n\r\n```java\r\n    // Obtain an instance of IBAN.\r\n    IBAN iban = IBAN.valueOf( \"NL91ABNA0417164300\" );\r\n\r\n    // toString() emits standard formatting, toPlainString() is compact.\r\n    String s = iban.toString(); // \"NL91 ABNA 0417 1643 00\"\r\n    String p = iban.toPlainString(); // \"NL91ABNA0417164300\"\r\n\r\n    // Input may be formatted.\r\n    iban = IBAN.valueOf( \"BE68 5390 0754 7034\" );\r\n\r\n    // The valueOf() method returns null if its argument is null.\r\n    iban.valueOf( null ); // null\r\n\r\n    // The parse() method throws an exception if its argument is null.\r\n    iban.parse( null ); // IllegalArgumentException\r\n\r\n    // IBAN does not implement Comparable<T>, but a simple Comparator is provided.\r\n    List<IBAN> ibans = getListOfIBANs();\r\n    Collections.sort( ibans, IBAN.LEXICAL_ORDER );\r\n\r\n    // The equals() and hashCode() methods are implemented.\r\n    Map<IBAN, String> ibansAsKeys = Maps.newHashMap();\r\n    ibansAsKeys.put( iban, \"this is fine\" );\r\n\r\n    // You can use the Modulo97 class directly to compute or verify the check digits on an input.\r\n    String candidate = \"GB29 NWBK 6016 1331 9268 19\";\r\n    boolean valid = Modulo97.verifyCheckDigits( candidate ); // true\r\n\r\n    // You can query whether an IBAN is of a SEPA-participating country\r\n    boolean isSepa = candidate.isSEPA(); // true\r\n\r\n    // Modulo97 API methods take CharSequence, not just String.\r\n    StringBuilder builder = new StringBuilder( \"LU000019400644750000\" );\r\n    int checkDigits = Modulo97.calculateCheckDigits( builder ); // 28\r\n\r\n    // Get the expected IBAN length for a country code:\r\n    int length = CountryCodes.getLengthForCountryCode( \"DK\" );\r\n\r\n    // Get the Bank Identifier and Branch Identifier (JDK 8):\r\n    Optional<String> bankId = IBANFields.getBankIdentifier( iban );\r\n    Optional<String> branchId = IBANFields.getBranchIdentifier( iban );\r\n\r\n    // Get the Bank Identifier and Branch Identifier (pre-JDK 8):\r\n    String bankId = IBANFieldsCompat.getBankIdentifier( iban );\r\n    String branchId = IBANFieldsCompat.getBranchIdentifier( iban );\r\n```\r\n\r\n### Design Choices\r\n\r\nI like the Joda-Time library and I try to follow the same design principles. I'm explicitly targetting Android, which\r\nrules out some modern Java language constructs. I'm trying to keep the library as simple as I can.\r\n\r\n* The `IBAN` objects are immutable and the IBAN therein is non-empty and valid. There is no support for partial or\r\n  invalid IBANs. Note that \"valid\" isn't as strict as it could be:\r\n  * It checks that the length is correct (varies per country) and that the check digits are correct.\r\n  * The national format mask (such as `QA2!n4!a21!c`) is not enforced. This seems to me like more work than necessary.\r\n    The modulo-97 checksum catches most input errors anyway, and I don't want to force a memory-hungry regex check onto\r\n    Android users. Speaking of Android, this mask could be used for keyboard switching on an `IBANEditText`, but that's\r\n    for a different open-source project.\r\n  * Any national check digits are not enforced. Doing this right is more work than I want to put into this. I lack the\r\n    country-specific knowledge of all the gotchas and intricacies. If other countries' check digits are anything like\r\n    those in the Netherlands, they're going to differ by Bank Identifier.\r\n* There is no way to configure extra restrictions such as \"only SEPA countries\" on the `IBAN.valueOf()` method. This, to\r\n  me, would look too much like Joda-Time's pluggable `Chronology` system, which leads to <acronym title=\"Principle of\r\n  Least Surprise\">PoLS</acronym> violations (background: [Why JSR-310 isn't Joda-Time][wjij]).\r\n* There is no class to represent a partially entered IBAN or a potentially-invalid IBAN. I'm sure there are use cases\r\n  where you want to shift this sort of data around. As far as this library is concerned, if it's not an IBAN it's just a\r\n  string, and there already exist data types for dealing with those.\r\n* Any feature that's not present in _all_ IBAN's is kept outside the `IBAN` class. Currently, that's the support for\r\n  extracting Bank and Branch identifiers, which lives in the `IBANFields` and `IBANFieldsCompat` classes.\r\n\r\n[wjij]: http://blog.joda.org/2009/11/why-jsr-310-isn-joda-time_4941.html\r\n\r\n### Version history\r\n\r\n#### 1.3: July 5th, 2015\r\n\r\n* Update to version 58 of the IBAN registry\r\n  * Sets SEPA flag for San Marino\r\n  * Adds length validation for Saint Lucia\r\n* Adds ability to extract Bank Identifier and Branch Identifier from an IBAN (issue [#5][i5]), if available. You can do\r\n  so using the static methods in `IBANFields` (returns JDK8 `Optional`s) and `IBANFieldsCompat` (returns nulls). There\r\n  are three countries where I had to interpret the spec in some way:\r\n  * Finland (FI) – The spec mentions both \"Not in use\" and \"Position 1-3 indicate the bank or banking group.\" I have\r\n    taken \"bank or banking group\" to be more or less synonymous with Bank Identifier and return it as such.\r\n  * Slovenia (SI) – The five digits following the checksum encode the financial institution and sub-encode the branch\r\n    identifier if applicable, depending on the type of financial institution. The library returns all five digits as the\r\n    bank identifier and never returns a branch identifier.\r\n  * Republic of Kosovo (XK) – The four digits following the checksum encode the Bank ID, and the last two of these four\r\n    sub-encode the branch ID. The library returns all four digits as the bank identifier. For example: if the IBAN has\r\n    \"1234\" in these positions, then the bank identifier is returned as \"1234\" and the branch identifier as \"34\".\r\n\r\n[i5]: https://github.com/barend/java-iban/issues/5\r\n\r\n#### 1.2: September 1st, 2014\r\n\r\n* Adds query method `IBAN.isSEPA()`.\r\n* Merges [pull request #4][pr4] by Matthias Vill, adding some hooks to aid interactive input validation & formatting.\r\n* Update to version 50 of the IBAN registry\r\n  * Adds length validation rules for: Jordan, Quatar, Republic of Kosovo, Timor-Leste\r\n\r\n[pr4]: https://github.com/barend/java-iban/pull/4\r\n\r\n#### 1.1: October 25th, 2013\r\n\r\n* Moves country information from `IBAN` into separate class `CountryCodes`\r\n* The known country codes can be obtained from `CountryCodes.getKnownCountryCodes()`.\r\n* The method `getLengthForCountryCode()` in `IBAN` is now deprecated, having moved into `CountryCodes`.\r\n* Adds length validation rules for:\r\n  * Albania, Algeria, Angola, Azerbaijan, Bahrein, Benin, Brazil, British Virgin Islands, Burkina Faso,\r\n    Burundi, Cameroon, Cape Verde, Congo, Costa Rica, Dominican Republic, Egypt, Faroe Islands, Gabon,\r\n    Georgia, Greenland, Guatemala, Iran, Ivory Coast, Kazakhstan, Kuwait, Lebanon, Madagascar, Mali,\r\n    Mauritania, Moldova, Mozambique, Pakistan, State of Palestine / Palestinian Territories, Saudi Arabia,\r\n    Senegal, Tunisia, Ukraine, United Arab Emirates\r\n  * **Note:** this list is not limited to SEPA countries or even the IBAN registry maintained by SWIFT. The\r\n    `CountryCodesParameterizedTest.java` file documents the origin for each of these IBAN specs.\r\n\r\n#### 1.0: May 30, 2013\r\n\r\n* Initial release, IBAN value type.\r\n* Supported countries:\r\n  * Andorra, Austria, Belgium, Bosnia and Herzegovinia, Bulgaria, Croatia, Cyprus, Czech Republic,\r\n    Denmark, Estonia, Finland, France, Germany, Gibraltar, Greece, Hungary, Iceland, Ireland,\r\n    Israel, Italy, Latvia, Liechtenstein, Lithuania, Luxembourg, Macedonia, Malta, Mauritius, Monaco,\r\n    Montenegro, Netherlands, Norway, Poland, Portugal, Romania, San Marino, Serbia, Slovakia, Slovenia,\r\n    Spain, Sweden, Switzerland, Turkey, United Kingdom\r\n\r\n### References\r\n\r\n * http://www.swift.com/dsp/resources/documents/IBAN_Registry.pdf\r\n * http://en.wikipedia.org/wiki/IBAN\r\n * http://www.ecbs.org/iban.htm\r\n * http://www.tbg5-finance.org/ibanabout.shtml\r\n * http://www.nordea.com/Our+services/International+products+and+services/Cash+Management/IBAN+countries/908462.html\r\n * http://www.europeanpaymentscouncil.eu/knowledge_bank_detail.cfm?documents_id=328\r\n\r\n### Alternatives\r\n\r\nIf you're looking for a more comprehensive IBAN library, you may prefer [iban4j][iban4j].\r\n\r\n[iban4j]:https://github.com/arturmkrtchyan/iban4j\r\n\r\n### Copyright and License\r\n\r\nCopyright 2015 Barend Garvelink\r\n\r\n```none\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n```\r\n","google":"UA-45747798-1","note":"Don't delete this file! It's used internally to help with page regeneration."}